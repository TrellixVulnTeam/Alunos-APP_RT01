{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { environment } from '../environments/environment';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.apiURL = environment.apiURLBase + '/api/usuarios';\n      this.urlToken = environment.apiURLBase + environment.getUrlToken;\n      this.clientId = environment.clientID;\n      this.clientSecret = environment.clientSecret;\n      this.jwtHelper = new JwtHelperService();\n    }\n\n    getToken() {\n      const tokenString = localStorage.getItem('access_token');\n\n      if (tokenString) {\n        const token = JSON.parse(tokenString).access_token;\n        return token;\n      }\n\n      return null;\n    }\n\n    encerrarSessao() {\n      localStorage.removeItem('access_token');\n    }\n\n    getUsuarioAutenticado() {\n      const token = this.getToken();\n\n      if (token) {\n        const usuario = this.jwtHelper.decodeToken(token).user_name;\n        return usuario;\n      }\n\n      return null;\n    }\n\n    isAuthenticated() {\n      const token = this.getToken();\n\n      if (token) {\n        const expired = this.jwtHelper.isTokenExpired(token);\n        return !expired;\n      }\n\n      return false;\n    }\n\n    salvar(usuario) {\n      return this.http.post(this.apiURL, usuario);\n    }\n\n    tentarLogar(username, password) {\n      const params = new HttpParams().set('username', username).set('password', password).set('grant_type', 'password');\n      const headers = {\n        Authorization: 'Basic ' + btoa(`${this.clientId}:${this.clientSecret}`),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      return this.http.post(this.urlToken, params.toString(), {\n        headers\n      });\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}